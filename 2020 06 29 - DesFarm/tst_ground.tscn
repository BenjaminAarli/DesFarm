[gd_scene load_steps=8 format=2]

[ext_resource path="res://textures/new_noisetexture.tres" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode vertex_lighting;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;



float hash(vec2 p){
	return fract(sin(dot(p * 17.17, vec2(14.91, 67.31))) * 4791.9511);
}

float noise(vec2 x){
	vec2 p = floor(x);
	vec2 f = fract(x);
	f = f*f*(3.0 - 2.0 * f);
	vec2 a = vec2(1.0, 0.0);
	return mix(
				mix(
					hash(p + a.yy), 
					hash(p + a.xy), 
					f.x),
		  	 mix(
					hash(p + a.yx), 
					hash(p + a.xx), 
					f.x), 
			f.y);
}

float fbm(vec2 x){
	float height = 0.0;
	float amplitude = 0.5;
	float frequency = 3.0;
	for (int i = 0; i < 6; i++){
		height += noise(x * frequency) * amplitude;
		amplitude *= 0.75;
		frequency *= 2.0;
	}
	return height;
}

void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,-1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,-1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset + (sin(TIME) / 30.0);
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	
	float height = fbm(VERTEX.xz * 4.0);
	VERTEX.y += height * 0.5;
	COLOR.xyz = vec3(height);
	
	if (VERTEX.y > 0.25){
		VERTEX.x += sin(TIME / 2.0) / 10.0
	}
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALBEDO = COLOR.xyz * albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	NORMALMAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMALMAP_DEPTH = normal_scale;
	
}
"

[sub_resource type="OpenSimplexNoise" id=2]
period = 3.0
persistence = 0.0
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=3]
seamless = true
as_normalmap = true
bump_strength = 32.0
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.858824, 0.588235, 0.458824, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/normal_scale = 1.0
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 2, 2, 2 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_normal = SubResource( 3 )

[sub_resource type="CubeMesh" id=5]
material = SubResource( 4 )
size = Vector3( 10, 2, 10 )
subdivide_width = 25
subdivide_height = 25
subdivide_depth = 25

[sub_resource type="GDScript" id=6]
script/source = "extends Spatial


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	rotate_y(0.01)
	pass
"

[node name="asdf0000" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0 )
mesh = SubResource( 5 )
material/0 = null

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 1.74846e-07, 0, 1, 0, -1.74846e-07, 0, 1, 0, -1, 10 )
mesh = SubResource( 5 )
material/0 = null

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.965926, 0.258819, 0, -0.258819, 0.965926, 0, 2, 7 )

[node name="Spatial" type="Spatial" parent="."]
script = SubResource( 6 )

[node name="OmniLight" type="OmniLight" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, -3 )
